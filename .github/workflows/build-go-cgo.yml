name: Build Go CGO Version

on:
  push:
    tags:
      - 'v*.*.*'  # Trigger on version tags like v0.1.0
    branches:
      - main      # Also trigger on main branch pushes
      - dev       # Also trigger on dev branch pushes (for testing)
  pull_request:
    branches:
      - main
      - dev
  workflow_dispatch:  # Allow manual trigger

permissions:
  contents: write

jobs:
  build-go-cgo:
    name: Build Go CGO ${{ matrix.arch }}
    runs-on: windows-latest
    strategy:
      matrix:
        include:
          - arch: x86_64
            mingw: mingw64
            gcc_arch: x86_64
          - arch: x86
            mingw: mingw32
            gcc_arch: i686
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'
          cache-dependency-path: ntpi_dumper_go_version/go.sum
      
      - name: Set up MSYS2 and MinGW
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{ matrix.mingw == 'mingw64' && 'MINGW64' || 'MINGW32' }}
          update: true
          install: >-
            mingw-w64-${{ matrix.gcc_arch }}-gcc
            mingw-w64-${{ matrix.gcc_arch }}-pkg-config
          path-type: inherit
      
      - name: Verify GCC installation
        shell: msys2 {0}
        run: |
          echo "Checking GCC installation..."
          gcc --version
          which gcc
          echo "GCC path: $(which gcc)"
      
      - name: Set up build environment
        shell: pwsh
        run: |
          Write-Host "Setting up build environment..." -ForegroundColor Cyan
          
          # Navigate to Go project directory
          Set-Location ntpi_dumper_go_version
          
          # Verify xz_source files
          $xzDir = "xz_source/bin_${{ matrix.arch == 'x86_64' && 'x86-64' || 'i686-sse2' }}"
          if (-not (Test-Path "$xzDir/liblzma.dll")) {
            Write-Host "Error: liblzma.dll not found in $xzDir" -ForegroundColor Red
            exit 1
          }
          Write-Host "âœ“ xz_source files verified" -ForegroundColor Green
          
          # Download Go dependencies
          Write-Host "Downloading Go dependencies..." -ForegroundColor Yellow
          go mod download
          if ($LASTEXITCODE -ne 0) {
            Write-Host "Failed to download Go dependencies" -ForegroundColor Red
            exit 1
          }
          Write-Host "âœ“ Go dependencies ready" -ForegroundColor Green
      
      - name: Build Go CGO version
        shell: pwsh
        run: |
          Write-Host "Building Go CGO version for ${{ matrix.arch }}..." -ForegroundColor Cyan
          
          Set-Location ntpi_dumper_go_version
          
          # Set up paths
          $xzInclude = (Resolve-Path "xz_source/include").Path.Replace('\', '/')
          $xzBinDir = if ("${{ matrix.arch }}" -eq "x86_64") { "bin_x86-64" } else { "bin_i686-sse2" }
          $xzLib = (Resolve-Path "xz_source/$xzBinDir").Path.Replace('\', '/')
          
          # Configure CGO
          $env:CGO_ENABLED = "1"
          $env:CGO_CFLAGS = "-I$xzInclude"
          $env:CGO_LDFLAGS = "-L$xzLib -llzma"
          
          # Add MinGW to PATH
          if ("${{ matrix.arch }}" -eq "x86_64") {
            $env:PATH = "C:\msys64\mingw64\bin;$env:PATH"
          } else {
            $env:PATH = "C:\msys64\mingw32\bin;$env:PATH"
          }
          
          Write-Host "CGO Configuration:" -ForegroundColor Yellow
          Write-Host "  CGO_ENABLED: $env:CGO_ENABLED" -ForegroundColor Gray
          Write-Host "  CGO_CFLAGS: $env:CGO_CFLAGS" -ForegroundColor Gray
          Write-Host "  CGO_LDFLAGS: $env:CGO_LDFLAGS" -ForegroundColor Gray
          Write-Host "  GCC Path: $(where.exe gcc | Select-Object -First 1)" -ForegroundColor Gray
          
          # Build
          $outputName = "ntpi-dumper-cgo-${{ matrix.arch }}.exe"
          go build -tags cgo -ldflags="-s -w" -o $outputName ./cmd/ntpi-dumper
          
          if ($LASTEXITCODE -ne 0) {
            Write-Host "Build failed!" -ForegroundColor Red
            exit 1
          }
          
          Write-Host "âœ“ Build successful!" -ForegroundColor Green
          
          # Copy DLL
          $dllSource = "xz_source/$xzBinDir/liblzma.dll"
          $dllDest = "liblzma-${{ matrix.arch }}.dll"
          Copy-Item $dllSource -Destination $dllDest -Force
          Write-Host "âœ“ DLL copied" -ForegroundColor Green
          
          # Show file sizes
          $exeSize = (Get-Item $outputName).Length / 1MB
          $dllSize = (Get-Item $dllDest).Length / 1KB
          Write-Host ""
          Write-Host "Build Results:" -ForegroundColor Cyan
          Write-Host "  Executable: $([math]::Round($exeSize, 2)) MB" -ForegroundColor White
          Write-Host "  DLL: $([math]::Round($dllSize, 2)) KB" -ForegroundColor White
      
      - name: Test executable
        shell: pwsh
        run: |
          Set-Location ntpi_dumper_go_version
          
          $exeName = "ntpi-dumper-cgo-${{ matrix.arch }}.exe"
          $dllName = "liblzma-${{ matrix.arch }}.dll"
          
          # Rename DLL for testing
          Copy-Item $dllName -Destination "liblzma.dll" -Force
          
          Write-Host "Testing $exeName..." -ForegroundColor Cyan
          
          # Test version
          Write-Host "`n[Test 1/2] Testing --version..." -ForegroundColor Yellow
          & ".\$exeName" --version
          if ($LASTEXITCODE -ne 0) {
            Write-Host "ERROR: Version test failed!" -ForegroundColor Red
            exit 1
          }
          Write-Host "âœ“ Version test passed" -ForegroundColor Green
          
          # Test help
          Write-Host "`n[Test 2/2] Testing --help..." -ForegroundColor Yellow
          & ".\$exeName" --help
          if ($LASTEXITCODE -ne 0) {
            Write-Host "ERROR: Help test failed!" -ForegroundColor Red
            exit 1
          }
          Write-Host "âœ“ Help test passed" -ForegroundColor Green
          
          Write-Host "`nâœ“ All tests passed!" -ForegroundColor Green
      
      - name: Calculate SHA256
        id: sha256
        shell: pwsh
        run: |
          Set-Location ntpi_dumper_go_version
          
          $exeName = "ntpi-dumper-cgo-${{ matrix.arch }}.exe"
          $dllName = "liblzma-${{ matrix.arch }}.dll"
          
          # Hash executable
          $exeHash = (Get-FileHash -Path $exeName -Algorithm SHA256).Hash
          echo "exe_sha256=$exeHash" >> $env:GITHUB_OUTPUT
          "$exeHash  $exeName" | Out-File -FilePath "$exeName.sha256" -Encoding ascii
          Write-Host "SHA256 ($exeName): $exeHash"
          echo "::notice title=SHA256 for $exeName::$exeHash"
          
          # Hash DLL
          $dllHash = (Get-FileHash -Path $dllName -Algorithm SHA256).Hash
          echo "dll_sha256=$dllHash" >> $env:GITHUB_OUTPUT
          "$dllHash  $dllName" | Out-File -FilePath "$dllName.sha256" -Encoding ascii
          Write-Host "SHA256 ($dllName): $dllHash"
          echo "::notice title=SHA256 for $dllName::$dllHash"
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ntpi-dumper-cgo-${{ matrix.arch }}
          path: |
            ntpi_dumper_go_version/ntpi-dumper-cgo-${{ matrix.arch }}.exe
            ntpi_dumper_go_version/liblzma-${{ matrix.arch }}.dll
            ntpi_dumper_go_version/ntpi-dumper-cgo-${{ matrix.arch }}.exe.sha256
            ntpi_dumper_go_version/liblzma-${{ matrix.arch }}.dll.sha256
          retention-days: 90

  create-release:
    name: Create Release
    needs: build-go-cgo
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          draft: false
          prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
          files: |
            artifacts/ntpi-dumper-cgo-x86_64/*.exe
            artifacts/ntpi-dumper-cgo-x86_64/*.dll
            artifacts/ntpi-dumper-cgo-x86_64/*.sha256
            artifacts/ntpi-dumper-cgo-x86/*.exe
            artifacts/ntpi-dumper-cgo-x86/*.dll
            artifacts/ntpi-dumper-cgo-x86/*.sha256
          body: |
            ## NTPI Dumper Go (CGO Version) - High Performance
            
            ### ðŸš€ Performance Build
            This release includes the **CGO-enabled** version of NTPI Dumper Go, which uses native C libraries for **10-20x faster** LZMA2 decompression compared to pure Go implementation.
            
            ### ðŸ“¦ Downloads
            
            #### Windows x64 (Recommended)
            - **ntpi-dumper-cgo-x86_64.exe** - Main executable
            - **liblzma-x86_64.dll** - Required LZMA library (keep in same folder)
            
            #### Windows x86 (32-bit)
            - **ntpi-dumper-cgo-x86.exe** - Main executable
            - **liblzma-x86.dll** - Required LZMA library (keep in same folder)
            
            ### ðŸ“‹ Usage
            
            1. Download both the `.exe` and corresponding `.dll` file
            2. Keep them in the same directory
            3. Run: `ntpi-dumper-cgo-x86_64.exe <file.ntpi>`
            
            ### âœ… Verify Downloads
            
            Use the `.sha256` files to verify file integrity:
            ```powershell
            (Get-FileHash -Algorithm SHA256 ntpi-dumper-cgo-x86_64.exe).Hash
            ```
            
            ### ðŸ”§ Requirements
            
            - Windows 7 or later
            - Both .exe and .dll files must be in the same directory
            
            ### âš¡ Performance
            
            - **10-20x faster** LZMA2 decompression vs pure Go
            - Multi-threaded extraction
            - Optimized for large firmware files
            
            ---
            
            **Note:** This is the CGO version. For a standalone version without DLL dependencies, check the Python or pure Go releases.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
